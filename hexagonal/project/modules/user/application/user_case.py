from ..domain.repository import UserRepository
from ..domain.models import User
from ....core.security import hash_password, verify_password, create_token
import uuid


class RegisterUser:
    """Use case for registering a new user."""
    def __init__(self, repo: UserRepository):
        self.repo = repo

    def execute(self, username: str, email: str, password: str) -> None:
        """Register a new user."""

        user = User(
            id=uuid.uuid4().int >> 64,  # Assuming ID is auto-generated by the repository
            username=username,
            email=email,
            password_hash=hash_password(password)  # In a real application, hash the password
        )
        self.repo.create_user(user)
        # TODO RETRUN MESSAGE CONFIRMATION


class LoginUser:
    """Use case for logging in an existing user."""
    def __init__(self, repo: UserRepository):
        self.repo = repo

    def execute(self, email: str, password: str) -> str:
        """Log in an existing user."""
        user = self.repo.get_by_email(email)
        if user and verify_password(password, user.password_hash):
            return create_token({"user_id": user.id, "email": user.email})
        raise ValueError("Invalid email or password")  # In a real application, handle this more gracefully